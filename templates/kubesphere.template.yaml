AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy Kubesphere into an existing Kubernetes Cluster (qs-1pipr93dp)
Parameters:
#  KubeConfigPath:
#    Type: String
  KubeConfigKmsContext:
    Type: String
    Default: "EKSQuickStart"
  KubeClusterName:
    Type: String
  KubeManifestLambdaArn:
    Type: String
  KubeGetLambdaArn:
    Type: String
  Openpitrix:
    Type: String
  Devops:
    Type: String
  Servicemesh:
    Type: String
  Notification:
    Type: String
  Alerting:
    Type: String
  Logging:
    Type: String
  Auditing:
    Type: String
  Events:
    Type: String
  MetricServer:
    Type: String
  Multicluster:
    Type: String
  Networkpolicy:
    Type: String
 
  #KubeSphereLicenseKey:
  # Type: String
  #NoEcho: true
Resources:
  KubeSphereCRD:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      #ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${ClusterName}"
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      #KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest:
        apiVersion: apiextensions.k8s.io/v1beta1
        kind: CustomResourceDefinition
        metadata:
          name: clusterconfigurations.installer.kubesphere.io
        spec:
          group: installer.kubesphere.io
          versions:
          - name: v1alpha1
            served: true
            storage: true
          scope: Namespaced
          names:
            plural: clusterconfigurations
            singular: clusterconfiguration
            kind: ClusterConfiguration
            shortNames:
            - cc
  KubeSphereNamespace:
    DependsOn: KubeSphereCRD
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      #ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${ClusterName}"
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      #KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: kubesphere-system
  KubeSphereServiceAccount:
    DependsOn: KubeSphereNamespace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      #KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: ks-installer
          namespace: kubesphere-system
  KubeSphereClusterRole:
    DependsOn: KubeSphereNamespace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      #KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: ks-installer
        rules:
        - apiGroups:
          - ""
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - extensions
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - batch
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - apiregistration.k8s.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - tenant.kubesphere.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - certificates.k8s.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - devops.kubesphere.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - logging.kubesphere.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - jaegertracing.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - storage.k8s.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - admissionregistration.k8s.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - policy
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - autoscaling
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - networking.istio.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - config.istio.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - iam.kubesphere.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - notification.kubesphere.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - auditing.kubesphere.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - events.kubesphere.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - core.kubefed.io
          resources:
          - '*'
          verbs:
          - '*'
        - apiGroups:
          - installer.kubesphere.io
          resources:
          - '*'
          verbs:
          - '*'
  KubeSphereClusterRoleBinding:
    DependsOn: KubeSphereClusterRole
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      #KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest:
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: ks-installer
        subjects:
        - kind: ServiceAccount
          name: ks-installer
          namespace: kubesphere-system
        roleRef:
          kind: ClusterRole
          name: ks-installer
          apiGroup: rbac.authorization.k8s.io  
  KubeSphereDeployment:
    DependsOn: KubeSphereNamespace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      #KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ks-installer
          namespace: kubesphere-system
          labels:
            app: ks-install
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: ks-install
          template:
            metadata:
              labels:
                app: ks-install
            spec:
              serviceAccountName: ks-installer
              containers:
              - name: installer
                image: kubespheredev/ks-installer:latest
                imagePullPolicy: "Always"   
                volumeMounts:
                - mountPath: /etc/localtime
                  name: host-time
              volumes:
              - hostPath:
                  path: /etc/localtime
                  type: ""
                name: host-time
  KubesphereClusterConfiguration:
    DependsOn: KubeSphereDeployment
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      #ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${ClusterName}"
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      #KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: installer.kubesphere.io/v1alpha1
        kind: ClusterConfiguration
        metadata:
          name: ks-installer
          namespace: kubesphere-system
          labels:
            version: v3.0.0
        spec:
          persistence:
            storageClass: ""
          authentication:
            jwtSecret: ""
          etcd:
            monitoring: false
            endpointIps: localhost
            port: 2379
            tlsEnable: true
          common:
            mysqlVolumeSize: 20Gi
            minioVolumeSize: 20Gi
            etcdVolumeSize: 20Gi
            openldapVolumeSize: 2Gi
            redisVolumSize: 2Gi
          es:   # Storage backend for logging, events and auditing.
            elasticsearchMasterReplicas: 1   # total number of master nodes, it's not allowed to use even number
            elasticsearchDataReplicas: 1     # total number of data nodes.
            elasticsearchMasterVolumeSize: 4Gi   # Volume size of Elasticsearch master nodes.
            elasticsearchDataVolumeSize: 20Gi    # Volume size of Elasticsearch data nodes.
            logMaxAge: 7                     # Log retention time in built-in Elasticsearch, it is 7 days by default.
            elkPrefix: logstash
          console:
            enableMultiLogin: true  # enable/disable multi login
            port: 30880
          alerting:
            enabled: ${Alerting}
          auditing:
            enabled: ${Auditing}
          devops:
            enabled: ${Devops}
            jenkinsMemoryLim: 2Gi
            jenkinsMemoryReq: 1500Mi
            jenkinsVolumeSize: 8Gi
            jenkinsJavaOpts_Xms: 512m
            jenkinsJavaOpts_Xmx: 512m
            jenkinsJavaOpts_MaxRAM: 2g
          events:
            enabled: ${Events}
            ruler:
              enabled: false
              replicas: 2
          logging:
            enabled: ${Logging}            
            logsidecarReplicas: 2
          metrics_server:
            enabled: ${MetricServer}
          monitoring:
            prometheusReplicas: 1
            prometheusMemoryRequest: 400Mi
            prometheusVolumeSize: 20Gi
            alertmanagerReplicas: 1
          multicluster:
            clusterRole: ${Multicluster}  # host | member | none
          networkpolicy:
            enabled: ${Networkpolicy}
          notification:
            enabled: ${Notification}
          openpitrix:
            enabled: ${Openpitrix}
          servicemesh:
            enabled: ${Servicemesh}
  KubeSphereService:
    DependsOn: KubesphereClusterConfiguration
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      #KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest:
        apiVersion: v1
        kind: Service
        metadata:
          labels:
            app: ks-console
            tier: frontend
            version: v3.0.0
          name: ks-console
          namespace: kubesphere-system
        spec:
          ports:
          - name: nginx
            nodePort: 30880
            port: 80
            protocol: TCP
            targetPort: 8000
          selector:
            app: ks-console
            tier: frontend
            version: v3.0.0
          sessionAffinity: None
          type: LoadBalancer
  KubeSphereConsole:
    DependsOn: KubeSphereService
    Type: "Custom::KubeGet"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeGetLambdaArn
      #KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      ClusterName: !Ref KubeClusterName
      Namespace: kubesphere-system
      Name: 'svc/ks-console'
      JsonPath: '{.status.loadBalancer.ingress[0].hostname}'  
Outputs:
  KubeSphereConsole:
    Value: !Sub "http://${KubeSphereConsole}"